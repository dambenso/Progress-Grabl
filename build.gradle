/*
 * Build file for grabl
 * A Gradle plugin for ABL based on PCT written in Groovy
 *
 * Based on:
 *  - https://docs.gradle.org/current/userguide/plugins.html
 *  - https://docs.gradle.org/current/userguide/custom_plugins.html
 *  - https://github.com/gradle/gradle/tree/master/subprojects/docs/src/samples/customPlugin/plugin
 *  - https://github.com/gradle/gradle/tree/master/subprojects/docs/src/samples/javaGradlePlugin
 */

plugins {
    id 'com.gradle.build-scan' version '1.11'
    id 'me.champeau.buildscan-recipes' version '0.2.3'
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.9.9'
    id 'nebula.release' version '6.1.0'
}

// Apply the groovy plugin to add support for Groovy
apply plugin: 'groovy'

group = 'io.gitlab.grabl'

ext {
    vcsBaseUrl = 'https://gitlab.com/grabl/grabl'
}

repositories {
    jcenter()
}

dependencies {
    // Use the awesome Spock testing and specification framework
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4-rc-4') {
        exclude module: 'groovy-all'
    }
    testCompile 'junit:junit:4.12'
    // required by spock for mocking classes
    testCompile 'net.bytebuddy:byte-buddy:1.6.9'
}


// Configure development and publishing helper plugins
// Inspired by: https://github.com/gradle/kotlin-dsl/blob/master/plugins/build.gradle.kts

class GradlePluginMetaData {
    String name
    String displayName
    String id
    String implementationClass

    GradlePluginMetaData(String name, String displayName, String id, String implementationClass) {
        this.name = name
        this.displayName = displayName
        this.id = id
        this.implementationClass = implementationClass
    }
}

def pluginList = [
    new GradlePluginMetaData(
        project.name,
        'A Gradle plugin for ABL based on PCT',
        "${project.group}.${project.name}",
        "${project.group}.GrablPlugin"
    )
]

pluginBundle {
    website = 'https://gitlab.com/grabl/grabl'
    vcsUrl = 'https://gitlab.com/grabl/grabl'
    tags = ['abl', 'pct']
}

pluginList.each { plugin ->
    // Configuration for the `java-gradle-plugin` plugin
    // https://docs.gradle.org/4.3.1/userguide/javaGradle_plugin.html
    gradlePlugin {
        plugins {
            create(plugin.id) {
                id = plugin.id
                implementationClass = plugin.implementationClass
            }
        }
    }

    // Configuration for the `com.gradle.plugin-publish` plugin
    // https://plugins.gradle.org/docs/publish-plugin
    // https://guides.gradle.org/publishing-plugins-to-gradle-plugin-portal/
    pluginBundle {
        plugins {
            create(plugin.id) {
                id = plugin.id
                displayName = plugin.displayName
                description = plugin.displayName
            }
        }
    }
}

postRelease.dependsOn(publishPlugins)

// Configure build-scans
// https://docs.gradle.com/build-scan-plugin/

buildScan {
    licenseAgreementUrl = 'https://gradle.com/terms-of-service'
    licenseAgree = 'yes'

    if (System.getenv('CI')) {
        publishAlways()
        tag 'CI'
    } else {
        tag 'dev'
    }
}

buildScanRecipes {
    recipe 'git-commit', baseUrl: "$vcsBaseUrl/commit"
    recipes 'git-status', 'gc-stats'

    recipe('remote',
            url: "https://github.com/eskatos/gradle-buildscan-recipes/raw/a1e7dac6385148377c7a246a4372646d6e41a8ae/src/recipes/git-branch.groovy",
            cache: true
    )
    recipe('remote',
            url: "https://github.com/gimoh/gradle-buildscan-recipes/raw/gitlab-ci/src/recipes/gitlab-ci.groovy"
    )
}
